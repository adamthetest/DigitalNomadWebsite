name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist

    - name: Run Composer Audit
      run: composer audit --format=json > composer-audit.json || true

    - name: Upload Composer Audit Results
      uses: actions/upload-artifact@v4
      with:
        name: composer-audit-results
        path: composer-audit.json

  npm-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install NPM dependencies
      run: npm ci

    - name: Run NPM Audit
      run: npm audit --json > npm-audit.json || true

    - name: Upload NPM Audit Results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: npm-audit.json

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'php', 'javascript' ]

    steps:
    - uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}

    - name: Setup PHP
      if: matrix.language == 'php'
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Setup Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Composer dependencies
      if: matrix.language == 'php'
      run: composer install --no-progress --prefer-dist

    - name: Install NPM dependencies
      if: matrix.language == 'javascript'
      run: npm ci

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4

  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  lighthouse-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v5

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, sqlite3, pdo_mysql, pdo_sqlite, bcmath, gd, zip, curl, intl, xml, json, iconv, openssl, tokenizer, ctype, fileinfo, pdo, session, simplexml, xmlreader, xmlwriter, zip, zlib

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Install NPM dependencies
      run: npm ci

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Build assets
      run: npm run build

    - name: Start Laravel server
      run: php artisan serve --host=0.0.0.0 --port=8000 &
      env:
        APP_URL: http://localhost:8000

    - name: Wait for Laravel server
      run: sleep 10

    - name: Run Lighthouse Security Audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:8000
        configPath: './.lighthouserc-security.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
